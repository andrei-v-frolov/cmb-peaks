! full-sky QU to EB rotation wrapper
subroutine VARIANT(rotate_qu2eb)(nside, order, lmax, QU, EB)
	integer nside, npix, lmax, order, spin
	MAPTYPE(XP, 0:12*nside**2-1) ::  QU
	real(XP), dimension(0:12*nside**2-1,1:2) :: EB
	real(DP), dimension(:,:), allocatable :: map
	complex(DPC), allocatable :: alms(:,:,:)
	
	npix = nside2npix(nside); spin = 2
	allocate(map(0:npix-1,1:2), alms(1:2, 0:lmax, 0:lmax))
	
	LOAD(map,QU); if (order == NEST) call convert_nest2ring(nside, map)
	
	call map2alm_spin(nside, lmax, lmax, spin, map, alms)
	call alm2map(nside, lmax, lmax, alms(1:1,:,:), map(:,1))
	call alm2map(nside, lmax, lmax, alms(2:2,:,:), map(:,2))
	
	if (order == NEST) call convert_ring2nest(nside, map); EB = map
	
	deallocate(map, alms)
end subroutine

! full-sky EB to QU rotation wrapper
subroutine VARIANT(rotate_eb2qu)(nside, order, lmax, EB, QU)
	integer nside, npix, lmax, order, spin
	MAPTYPE(XP, 0:12*nside**2-1) ::  QU
	real(XP), dimension(0:12*nside**2-1,1:2) :: EB
	real(DP), dimension(:,:), allocatable :: map
	complex(DPC), allocatable :: alms(:,:,:)
	
	npix = nside2npix(nside); spin = 2
	allocate(map(0:npix-1,1:2), alms(1:2, 0:lmax, 0:lmax))
	
	map = EB; if (order == NEST) call convert_nest2ring(nside, map)
	
	call map2alm(nside, lmax, lmax, map(:,1), alms(1:1,:,:))
	call map2alm(nside, lmax, lmax, map(:,2), alms(2:2,:,:))
	call alm2map_spin(nside, lmax, lmax, spin, alms, map)
	
	if (order == NEST) call convert_ring2nest(nside, map); COPY(map,QU)
	
	deallocate(map, alms)
end subroutine

! full-sky QU mode projector
subroutine VARIANT(purify_qu)(nside, order, lmax, QU, purified, scaleE, scaleB)
	integer nside, npix, lmax, order, spin
	MAPTYPE(XP, 0:12*nside**2-1) :: QU, purified
	real(DP), dimension(:,:), allocatable :: map
	complex(DPC), allocatable :: alms(:,:,:)
	real(DP), optional :: scaleE, scaleB
	
	npix = nside2npix(nside); spin = 2
	allocate(map(0:npix-1,1:2), alms(1:2, 0:lmax, 0:lmax))
	
	LOAD(map, QU); if (order == NEST) call convert_nest2ring(nside, map)
	
	call map2alm_spin(nside, lmax, lmax, spin, map, alms)
	if (present(scaleE)) alms(1,:,:) = scaleE * alms(1,:,:)
	if (present(scaleB)) alms(2,:,:) = scaleB * alms(2,:,:)
	call alm2map_spin(nside, lmax, lmax, spin, alms, map)
	
	if (order == NEST) call convert_ring2nest(nside, map); COPY(map,purified)
	
	deallocate(map, alms)
end subroutine
